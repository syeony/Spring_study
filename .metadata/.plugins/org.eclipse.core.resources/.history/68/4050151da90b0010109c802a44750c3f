package com.ssafy.cafe.controller.rest;

import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ssafy.cafe.model.dto.Order;
import com.ssafy.cafe.model.dto.OrderInfo;
import com.ssafy.cafe.model.service.OrderService;

import io.swagger.v3.oas.annotations.Operation;

@RestController
@RequestMapping("/rest/order")
@CrossOrigin("*")
public class OrderRestController {
    @Autowired
    private OrderService oService;
    
    
	private static final Logger log = LoggerFactory.getLogger(OrderRestController.class);
    
    @PostMapping()
    public int makeOrder(@RequestBody Order order, @CookieValue(value = "loginId", required = false) String cafeId) {
    	String userid = URLDecoder.decode(cafeId, StandardCharsets.UTF_8);
    	order.setUserId(userid);
    	oService.makeOrder(order);
    	
    	return order.getId();
    }
    

//    @GetMapping("/{id}")
//    public List<Order> getOrderByUser(@PathVariable String id) {
//    	log.debug("id:{}",id);
//    	return oService.getOrderByUser(id);
//    }
    
    @PutMapping()
    public void updateOrder(Order order) {
    	oService.updateOrder(order);
    }
    
    @GetMapping("/{orderId}")
    public ResponseEntity<OrderInfo> getOrderDetails(@PathVariable String orderId){
        OrderInfo orderInfo = oService.getOrderInfo(Integer.parseInt(orderId));
        
        if(orderInfo == null) {
            return ResponseEntity.noContent().build();
        }
        
        return ResponseEntity.ok().body(orderInfo);
    }
    
    @GetMapping("/byUser")
    @Operation(summary="{id}에 해당하는 사용자의 최근 1개월간 주문 내역을 반환한다."
            + "반환 정보는 1차 주문번호 내림차순, 2차 주문 상세 오름차순으로 정렬된다.", 
            description = "관통프로젝트 6단계(Android)에서 사용됨.")
    public List<OrderInfo> getLastMonthOrder(String id) {
        return oService.getLastMonthOrder(id);
    }    
    
    
    @GetMapping("/byUserIn6Months")
    @Operation(summary="{id}에 해당하는 사용자의 최근 6개월간 주문 내역을 반환한다."
            + "반환 정보는 1차 주문번호 내림차순, 2차 주문 상세 오름차순으로 정렬된다.", 
            description = "관통프로젝트 6단계(Android)에서 사용됨.")
    public List<OrderInfo> getLast6MonthOrder(String id) {
        return oService.getLast6MonthOrder(id);
    } 
	
}
