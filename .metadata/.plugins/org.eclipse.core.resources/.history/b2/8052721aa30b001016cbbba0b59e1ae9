package com.ssafy.cafe.controller.rest;

import java.net.URLDecoder;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.ssafy.cafe.model.dto.Grade;
import com.ssafy.cafe.model.dto.Order;
import com.ssafy.cafe.model.dto.User;
import com.ssafy.cafe.model.service.OrderService;
import com.ssafy.cafe.model.service.UserService;

import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletResponse;

@RestController
@RequestMapping("/rest/user")
@CrossOrigin("*")
@Tag(name = "user controller", description = "사용자 로그인등 사용자 기능을 정의한다.")
public class UserRestController {


    
    
    UserService userService;
    OrderService orderService;
    public UserRestController(UserService userService, OrderService orderService){
    	this.userService = userService;
    	this.orderService = orderService;
    }
    
    
    
    
    @PostMapping("")
    public boolean join(@RequestBody User user){
    	int result = userService.join(user);
    	if(result >0) {
    		return true;
    	}
    	else {
    		return false;
    	}
    }
    
    @PostMapping("/login")
    public User login(@RequestBody User user , HttpServletResponse response) {
    	User ruser = userService.login(user.getId(), user.getPass());
    	
    	if(ruser != null) {
    		String encodedId = URLEncoder.encode(user.getId(), StandardCharsets.UTF_8);
    		Cookie cookie = new Cookie("loginId", encodedId);
    		cookie.setMaxAge(60 * 60 * 24 * 30);
    		cookie.setPath("/");
    		response.addCookie(cookie);
    		
    	}else {
    		
    	}
    	return ruser;
    }
    
    @GetMapping("/isUsed")
    public boolean isUsed(@RequestParam String id) {
    	return userService.isUsedId(id);
    }
    
    @PostMapping("info")
    public ResponseEntity<Map<String, Object>> getUserInfo(@RequestBody Map<String, Object> userMap, @CookieValue("loginId") String userId) {
        userId = URLDecoder.decode(userId, StandardCharsets.UTF_8);
        int stamps = (int) userMap.getOrDefault("stamps", 0);

        // 서비스에서 정보 조회
        User user = userService.selectUser(userId); // full user info
        List<Order> orders = orderService.getOrderByUser(userId);
        Map<String, Object> grade = this.getGrade(stamps);

        // 응답 Map 구성
        Map<String, Object> result = new HashMap<>();
        result.put("user", user);
        result.put("order", orders);
        result.put("grade", grade);

        return ResponseEntity.ok(result);
    }
    
    
    
    
    /**
     * 사용자 등급정보를 계산하여 리턴한다.
     * 이미지가 seeds.png, 등급이 씨앗, step이 10, stepMax가 1, to가 7 이라면,
     * 씨앗 1단계 등급의 사용자가 다음단계로 가려면 7개 더 모아야 함을 의미한다.
     *  img, step, stepMax, to, title이 각 key가 되고, 
     *  각각의 key을 맞게 입력하여 리턴하면 된다.
     *   
     *  src/test/java에 있는 테스트 케이스를 통과하면 정상동작한다. 
     *   
     * @param stamp
     * @return
     */
    public Map<String, Object> getGrade(Integer stamp) {
        Map<String, Object> grade = new HashMap<>();
        // 등급 계산 구현.

        String[] titles = {"씨앗", "새싹", "잎새", "나무"};
        String[] imgs = {"seeds.png", "sprout.png", "leaf.png", "tree.png"};
        int stepMax = 10;

        // 💡 1부터 시작하는 구간을 위한 step 계산
        int step = (stamp - 1) / stepMax;
        if (stamp <= 0) step = 0; // 예외 처리

        // 최대 단계 초과 시 제한
        if (step >= titles.length) {
            step = titles.length - 1;
        }

        // 다음 단계까지 필요한 스탬프 수
        int toNext = 0;
        if (step < titles.length - 1) {
            int currentMax = (step + 1) * stepMax;
            toNext = currentMax - stamp;
        }

        grade.put("img", imgs[step]);
        grade.put("step", step);
        grade.put("stepMax", stepMax);
        grade.put("to", toNext);
        grade.put("title", titles[step]);

        
        return grade;
        
        
    }

    

}
